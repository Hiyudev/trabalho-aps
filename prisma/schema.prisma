// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  image         String
  emailVerified Boolean?

  participates Participates[]
  votes        Vote[]
  receipts     Receipt[]
  accounts     Account[]
  sessions     Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Participates {
  id        String   @id @default(uuid())
  enteredAt DateTime @default(now())
  role      String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@unique([userId, teamId])
}

model Team {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invite String @default(uuid())

  members  Participates[]
  receipts Receipt[]
  events   Event[]
}

model Event {
  id String @id @default(uuid())

  title       String
  description String
  type        String
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  votes Vote[]
}

model Vote {
  id        String  @id @default(uuid())
  confirmed Boolean @default(false)
  excuse    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
}

model Receipt {
  id        String   @id @default(uuid())
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  money Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
}
